class PawnBoard:
   #private data memberes of the class
   __board = [["0","0","0","0"],["0","0","0","0"],["0","0","0","0"],["0","0","0","0"]["0","0","0","0","0"]]
   #intinalising board with value 0 so as to replace them accordingly in init function
   __current_state = ""
  
   def get_current_state(self):
       # gives the curret state of the game i.e {"A_WON" or "B_WON"}
       return (self.__current_state)
  
   def init(self):
       #initialising the board and current state according to the instructions given in the question
       l=['A',"","",'B']
       for i in range(5):
           for j in range(5):
               self.__board[i][j]=l[j]
       self.__current_state = "UNFINISHED"
       #After this the board looks likes this:
       #__board= [['A',"","","",'B'],['A',"","","",'B'],['A',"","","",'B'],['A',"","","",'B']['A',"","","",'B']
  
   def make_move(self,r1,c1,r2,c2):
       #Here source implies the position if r1,c1
       #Here Destinatin iplies the position of r2,c2
       succesful_move = False
       if(self.get_current_state() == "UNFINISHED"):#make a move if the game is unfinished
          
           if(self.__board[r1][c1] == "A"): #make a move for player1
          
               if(self.__board[r2][c2] == "" and (r1==r2) and (c1+1 == c2)):
               #checking whether the move is a straight move i.e
               #whether the move is towards right side as it is player1
               #1.destination should be empty 2.row number should be same
               #3.column of destination should be one more than the source column
                   succesful_move = True #noting it is a vaild move
                  
               elif(r1 == r2 and (c2 == c1 or c2 == c1)): #Checking whether the move is a straight one

                   if(self.__board[r2][c2] == 'O'): #Checking whether the source piece can kill the destination piece
                       succesful_move = True #noting it was a succesful move

           elif(self.__board[r1][c1] == "O"): #making a move for player2

               if(self.__board[r2][c2] == "" and (r1==r2) and (c1 == c2+1)):
               #checking whether the move is a straight move i.e
               #whether the move is towards left side as it is player2
               #1.destination should be empty 2.row number should be same
               #3.column of source should be one more than the destinstion column
                   succesful_move = True #noting it was a succesful move
              
               elif(c2 == c1 and (r2 == r1 or r2 == r1)): #Checking whether the move is a straight kill

                   if(self.__board[r2][c2] == 'A'):#Checking whether the source piece can kill the destination piece
                       succesful_move = True #noting it was a succesful move
           if(succesful_move):#If the move is a succesful one
  
               self.__board[r2][c2] = self.__board[r1][c1] #updating the destination with source piece
               self.__board[r1][c1] = ""
               #updating source position with "" indicating no piece is present as it is moved to destination

               if(B == 0): #Checking whether the source piece reached the other end
                   if(self.__board[r2][c2] == 'B'):
                       self.__current_state = "p1_WON" #Source piece is 'A'
                       print("A_WON")
                   else:
                       self.__current_state = "B_WON" #Source piece is 'B'
                       print("B_WON")
                   for i in range(4):
                       for j in range(4): #checking each position
                           if(self.__board[i][j] == 'A' and check1 == False):
                               check1 = ((j+1<=3 and self.__board[i][j]=="") or( (i+1<=3 and j+1<=3 and self.__board[i+1][j+1]=='O' ) or(i+1<=3 and j-1<=3 and self.__board[i+1][j+1]=='O')))#A straight move is possible then assigning true

                           elif(self.__board[i][j] == 'O' and check2== Fasle):
                               check2 = ((j-1>=0 and self.__board[i][j]=="") or( (i-1>=0 and j+1<=3 and self.__board[i-1][j+1]=='X' ) or(i-1>=0 and j-1<=3 and self.__board[i-1][j+1]=='X')))#A straight move is possible then assigning true
                   if(check1 or check2): #If any player can move
                       self.__current_state = "UNFINISHED"
                       print("Game UNFINISHED")      
       else:  
           #Not a vaid move
           return False           